#!/usr/bin/env bash

installer() {
  local install_type=$1
  local version=$2
  local install_path=$3

  local tmp_download_dir
  tmp_download_dir=$(mktemp -d -t mvnd_XXXXXXX)

  if [ "version" != "${install_type}" ]; then
    echo "The asdf-mvnd plugin only supports intalling official"
    echo "binary releases as built by the mvnd team."
    echo "If you want to install another version from source, see:"
    echo "https://github.com/apache/maven-mvnd"
    exit 1
  fi

  local artifact_name=$(artifact_name "$version")
  local platform
  case "$OSTYPE" in
    darwin*) platform="darwin" ;;
    linux*) platform="linux" ;;
    *) fail "Unsupported platform" ;;
  esac

  local architecture
  case "$(uname -m)" in
    x86_64) architecture="amd64" ;;
    arm64) 
      if [[ "$platform" = "darwin" ]]; then
        architecture="aarch64"
        if ! curl --silent --fail -IL "$(github_download_url "$artifact_name" "$version" "$platform" "$architecture")" > /dev/null ; then
          architecture="amd64"
          warn "Falling back to use x86_64 binary on $platform"
        fi
      else
        fail "Unsupported architecture on $platform"
      fi
    ;;
    *) fail "Unsupported architecture" ;;
  esac

  # running this in a subshell
  # we don't want to disturb current working dir
  (
    set -e

    local zip_path="$tmp_download_dir/mvnd-${version}.zip"
    if curl --silent --fail -IL "$(apache_download_url "$artifact_name" "$version" "${platform}" "${architecture}")" > /dev/null ; then
      curl -Lo "$zip_path" "$(apache_download_url "$artifact_name" "$version" "${platform}" "${architecture}")" || fail "could not download mvnd archive"
    else
      curl -Lo "$zip_path" "$(github_download_url "$artifact_name" "$version" "${platform}" "${architecture}")" || fail "could not download mvnd archive"
    fi
    unzip -q "$zip_path" -d "${tmp_download_dir}" || fail "failed to extract mvnd archive"
    mv "${tmp_download_dir}/$(directory_name "$version" "${platform}" "${architecture}")-${version}-${platform}-${architecture}"/* "$install_path" ||
 fail "failed to move mvnd to $install_path"
    rm -rf "$zip_path"
  ) || (rm -rf "$install_path"; exit 1)
}

github_download_url() {
  local artifact_name=$1
  local version=$2
  local platform=$3
  local architecture=$4
  echo "https://github.com/apache/maven-mvnd/releases/download/${version}/${artifact_name}-${version}-${platform}-${architecture}.zip"
}

apache_download_url() {
  local artifact_name=$1
  local version=$2
  local platform=$3
  local architecture=$4
  echo "https://downloads.apache.org/maven/mvnd/${version}/${artifact_name}-${version}-${platform}-${architecture}.zip"
}

artifact_name() {
  local version=$1
  local platform=$2
  local architecture=$3
  case "${version}" in
    0.[0-7]*) echo 'mvnd' ;;
    *) echo 'maven-mvnd' ;;
  esac
}

directory_name() {
  local version=$1
  local platform=$2
  local architecture=$3
  case "${version}" in
    0.[0-7]*|0.8.0) echo 'mvnd' ;;
    *) echo 'maven-mvnd' ;;
  esac
}

warn() {
  echo "asdf-mvnd warning: " "$@"
}

fail() {
  echo "asdf-mvnd error: " "$@"
  exit 1
}

installer "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
